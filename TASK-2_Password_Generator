import random
import string
import tkinter as tk
from tkinter import messagebox, filedialog

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")

        self.username_label = tk.Label(root, text="Enter username:")
        self.username_label.grid(row=0, column=0, sticky="w")

        self.username_entry = tk.Entry(root)
        self.username_entry.grid(row=0, column=1, sticky="w")

        self.length_label = tk.Label(root, text="Enter password length:")
        self.length_label.grid(row=1, column=0, sticky="w")

        self.length_entry = tk.Entry(root)
        self.length_entry.grid(row=1, column=1, sticky="w")

        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.grid(row=2, column=0, columnspan=2, pady=10)

        self.save_button = tk.Button(root, text="Save Password", command=self.save_password)
        self.save_button.grid(row=3, column=0, columnspan=2, pady=5)

        self.reset_button = tk.Button(root, text="Reset", command=self.reset_fields)
        self.reset_button.grid(row=4, column=0, columnspan=2, pady=5)

        self.generated_password_text = tk.Text(root, height=5, width=40)
        self.generated_password_text.grid(row=5, column=0, columnspan=2, pady=10)
        self.generated_password_text.tag_configure("green", foreground="green")

    def generate_password(self):
        try:
            length = int(self.length_entry.get())
            if length <= 0:
                messagebox.showerror("Error", "Password length must be greater than 0.")
                return

            characters = string.ascii_letters + string.digits + string.punctuation
            password = ''.join(random.choice(characters) for _ in range(length))

            username = self.username_entry.get()
            if username:
                generated_password = f"Username: {username}\nGenerated Password: {password}"
            else:
                generated_password = f"Generated Password: {password}"
            
            self.generated_password_text.delete(1.0, tk.END)
            self.generated_password_text.insert(tk.END, generated_password, "green")
        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter a valid number.")

    def save_password(self):
        generated_password = self.generated_password_text.get(1.0, tk.END).strip()
        if generated_password:
            file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
            if file_path:
                with open(file_path, "w") as file:
                    file.write(generated_password)
                    messagebox.showinfo("Password Saved", "Password has been saved to the selected file.")
        else:
            messagebox.showerror("Error", "No generated password to save.")

    def reset_fields(self):
        self.username_entry.delete(0, tk.END)
        self.length_entry.delete(0, tk.END)
        self.generated_password_text.delete(1.0, tk.END)

def main():
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
